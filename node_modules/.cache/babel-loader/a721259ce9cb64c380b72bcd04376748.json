{"ast":null,"code":"var _jsxFileName = \"/Users/university/Desktop/Portfolio/Movie Finder/movie_finder/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOVIE_API_URL = \"http://www.omdbapi.com/?i=tt3896198&apikey=db272c67\";\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return { ...state,\n        loading: true,\n        errorMessage: null\n      };\n\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return { ...state,\n        loading: false,\n        movies: action.payload\n      };\n\n    case \"SEARCH_MOVIES_FAILURE\":\n      return { ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    fetch(MOVIE_API_URL).then(response => response.json()).then(jsonResponse => {\n      dispatch({\n        type: \"SEARCH_MOVIES_SUCCESS\",\n        payload: jsonResponse.Search\n      });\n    });\n  }, []);\n\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n    fetch(`http://www.omdbapi.com/?i=${searchValue}&apikey=db272c67`).then(response => response.json()).then(jsonResponse => {\n      if (jsonResponse.Response === \"True\") {\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      } else {\n        dispatch({\n          type: \"SEARCH_MOVIES_FAILURE\",\n          error: jsonResponse.Error\n        });\n      }\n    });\n  };\n\n  const {\n    movies,\n    errorMessage,\n    loading\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      text: \"Search Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      search: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"App-Intro\",\n      children: \"Sharing a few of our favourite movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies\",\n      children: loading && !errorMessage ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this) : errorMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errorMessage\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this) : movies.map((movie, index) => /*#__PURE__*/_jsxDEV(Movie, {\n        movie: movie\n      }, `${index}-${movie.Title}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/university/Desktop/Portfolio/Movie Finder/movie_finder/src/components/App.js"],"names":["React","useState","useEffect","Header","Movie","Search","MOVIE_API_URL","initialState","loading","movies","errorMessage","reducer","state","action","type","payload","error","App","dispatch","useReducer","fetch","then","response","json","jsonResponse","search","searchValue","Response","Error","map","movie","index","Title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL = \"http://www.omdbapi.com/?i=tt3896198&apikey=db272c67\";\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      });\n  }, []);\n\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n\n    fetch(`http://www.omdbapi.com/?i=${searchValue}&apikey=db272c67`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          dispatch({\n            type: \"SEARCH_MOVIES_SUCCESS\",\n            payload: jsonResponse.Search\n        });\n      } else {\n        dispatch({\n            type: \"SEARCH_MOVIES_FAILURE\",\n            error: jsonResponse.Error\n        });\n      }\n    });\n  };\nconst { movies, errorMessage, loading} = state;\n  return (\n    <div className=\"App\">\n      <Header text=\"Search Movies\" />\n      <Search search={search} />\n      <p className=\"App-Intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>Loading....</span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}